// This file was auto-generated by 'typesafe-i18n'. Any manual changes will be overwritten.
/* eslint-disable */

import { initFormatters } from './formatters.js'
import type { Locales, Translations } from './i18n-types.js'
import { loadedFormatters, loadedLocales, locales } from './i18n-util.js'

import ar from './ar/index.js'
import bn from './bn/index.js'
import de from './de/index.js'
import en from './en/index.js'
import es from './es/index.js'
import fr from './fr/index.js'
import hi from './hi/index.js'
import id from './id/index.js'
import it from './it/index.js'
import ja from './ja/index.js'
import ko from './ko/index.js'
import mr from './mr/index.js'
import pt from './pt/index.js'
import ru from './ru/index.js'
import sw from './sw/index.js'
import ta from './ta/index.js'
import te from './te/index.js'
import tr from './tr/index.js'
import ur from './ur/index.js'
import vi from './vi/index.js'
import zh_CN from './zh-CN/index.js'
import zh_TW from './zh-TW/index.js'

const localeTranslations = {
	ar,
	bn,
	de,
	en,
	es,
	fr,
	hi,
	id,
	it,
	ja,
	ko,
	mr,
	pt,
	ru,
	sw,
	ta,
	te,
	tr,
	ur,
	vi,
	'zh-CN': zh_CN,
	'zh-TW': zh_TW,
}

export const loadLocale = (locale: Locales): void => {
	if (loadedLocales[locale]) return

	loadedLocales[locale] = localeTranslations[locale] as unknown as Translations
	loadFormatters(locale)
}

export const loadAllLocales = (): void => locales.forEach(loadLocale)

export const loadFormatters = (locale: Locales): void =>
	void (loadedFormatters[locale] = initFormatters(locale))
